/*
 * items for config
 */
package ca.ubc.gpec.ia.analyzer.gui;

import ca.ubc.gpec.ia.analyzer.controller.SettingsEditor;
import ca.ubc.gpec.ia.analyzer.controller.StainAnalyzerController;
import ca.ubc.gpec.ia.analyzer.model.IAO;
import ca.ubc.gpec.ia.analyzer.settings.StainAnalyzerSettings;
import ij.IJ;
import ij.io.OpenDialog;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Iterator;
import java.util.TreeSet;
import javax.swing.JFileChooser;

/**
 *
 * @author samuelc
 */
public class ConfigJPanel extends javax.swing.JPanel {

    public static final boolean DEBUG = true;
    private StainAnalyzerSettings settings; // analyzer settings
    private SettingsEditor settingsEditor; // setting editor
    private StainAnalyzerController stainAnalyzerController;

    /**
     * Creates new form ConfigJPanel
     */
    public ConfigJPanel() {
        initComponents();
        settings = null;
        inputImagesChooserButton.setToolTipText(Messages.INPUT_IMAGES_CHOOSER_BUTTON_TOOLTIP);
        // add listener to selectFileList
    }

    /**
     * set settingsEditor
     *
     * @param settingsEditor
     */
    public void setSettingsEditor(SettingsEditor settingsEditor) {
        this.settingsEditor = settingsEditor;
    }

    /**
     * set stainAnalyzerController
     *
     * @param stainAnalyzerController
     */
    public void setStainAnalyzerController(StainAnalyzerController stainAnalyzerController) {
        this.stainAnalyzerController = stainAnalyzerController;
        stainAnalyzerController.setConfigJPanel(this);
    }

    /**
     * get settings
     *
     * @return
     */
    public StainAnalyzerSettings getStainAnalyzerSettings() {
        return settings;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        inputImagesChooserButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();

        jButton1.setText("Settings");
        jButton1.setToolTipText("import/edit existing settings");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        inputImagesChooserButton.setText("Select image file(s)");
        inputImagesChooserButton.setToolTipText("select input image file(s)");
        inputImagesChooserButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inputImagesChooserButtonMouseClicked(evt);
            }
        });

        jButton3.setText("new");
        jButton3.setToolTipText("create new setting with default values");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Settings");

        jLabel2.setText("Input files");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(inputImagesChooserButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputImagesChooserButton)
                .addContainerGap(251, Short.MAX_VALUE))
        );

        jButton1.getAccessibleContext().setAccessibleName("ConfigSettingsButton");
    }// </editor-fold>//GEN-END:initComponents

    /**
     * import/edit exist settings
     *
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (settings == null) {
            settingsEditor.doSettings(SettingsEditor.EDIT_SETTINGS_MODE_LOAD);
            settings = settingsEditor.getSettings();
            stainAnalyzerController.setStainAnalyzerSettings(settings); // link stainAnalyzer setting to stainAnalyzer
        } else {
            settingsEditor.setSettings(settings);
            settingsEditor.doSettings(SettingsEditor.EDIT_SETTINGS_MODE_EDIT_ONLY);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * create new setting
     *
     * @param evt
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        settingsEditor.doSettings(SettingsEditor.EDIT_SETTINGS_MODE_NEW);
        settings = settingsEditor.getSettings();
        stainAnalyzerController.setStainAnalyzerSettings(settings); // link stainAnalyzer setting to stainAnalyzer
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * return the selected IAOs on the selectedFileList
     *
     * @return
     */
    private TreeSet<IAO> getSelectedIaos() {
        TreeSet<IAO> selectedIaos = new TreeSet<IAO>();

        return selectedIaos;
    }

    /**
     * choose input image files for analyzes
     *
     * @param evt
     */
    private void inputImagesChooserButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputImagesChooserButtonMouseClicked
        // user click on button to choose input file
        if (DEBUG) {
            System.out.println("asking user for input files ...");
        }
        ImageChooserDialog icd = new ImageChooserDialog(OpenDialog.getDefaultDirectory());
        icd.setMultiSelectionEnabled(true);	// enable multiple select
        icd.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);	// Allow user to choose files and directories
        icd.setDialogTitle("Please specify location of images to be analysed");
        int returnVal = icd.showOpenDialog(IJ.getInstance());
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return; // exit plugin
        }
        boolean maxExceeded = false;
        int iaoCount = 0;
        int maxToolTipShow = 5;
        // clear current iao on stainAnalyzerController ...
        stainAnalyzerController.clearIAOs();
        Iterator<IAO> itr = icd.getIaos().iterator();
        String updatedToolTipText = "";
        while (itr.hasNext()) {
            IAO iao = itr.next();
            stainAnalyzerController.addIAO(iao);
            iaoCount++;
            if (iaoCount > maxToolTipShow) {
                maxExceeded = true;
            }
            if (iaoCount <= maxToolTipShow) {
                updatedToolTipText = updatedToolTipText + "<li>" + iao.getImageDescriptors().first().getUrl();

            }
        }
        updatedToolTipText = "<html><body><b>files selected:</b><ol>" + updatedToolTipText;
        updatedToolTipText = updatedToolTipText + "</ol>" + (maxExceeded ? "... plus " + (iaoCount - 5) + " more" : "") + "</body></html>";
        // update tooltip text for image file chooser button
        inputImagesChooserButton.setToolTipText(updatedToolTipText);
        // update imageSelectionJPanel
        try {
            stainAnalyzerController.updateImageSelectionJPanel();
        } catch (IOException ioe) {
            // TODO: do something!!!
        } catch (URISyntaxException ex) {
            // TODO: do something!!!
        }
        stainAnalyzerController.setMainTabbedPaneToImageSelection();
        stainAnalyzerController.repaint();
    }//GEN-LAST:event_inputImagesChooserButtonMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton inputImagesChooserButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
